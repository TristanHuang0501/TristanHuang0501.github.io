---
layout:     post
title:      分布式原理（2）
subtitle:   CAP 定理
date:       2018-10-27
author:     "Tristan"
header-img: "img/post-bg-androidstudio.jpg"
catalog:    true
tags:
- Distribution System
---

CAP 原则又称为 CAP 定理，指的是在一个分布式系统中 Consistency（一致性），Availability（可用性）和 Partition tolerance（分区容错性）这三个基本需求，最多只能同时满足其中的2个。

### 1. CAP 的定义
> **Consistency**: all nodes see the same data at the same time

**一致性**，即每一个更新成功后，分布式系统中所有节点都能读到最新的信息。即所有节点相当于访问同一份内容，这样的系统被认为是强一致性的。一致性问题在并发系统中不可避免：对于客户端来说，一致性指的是并发访问时更新过的数据如何获取的问题；而从服务端来看，则是更新如何复制分布到整个系统，以保证数据最终一致。

一致性和我们熟悉的原子性或者事务性其实是一个概念，表示一个事务的操作是不可分割的，要不全成功，要不全不成功，不会出现这个事务完成了一半这样的情况。对应到分布式系统中就可以理解为一次数据的更新要么在所有节点成功，要么所有节点都保持不变。

> **Availability**: Every request receives a response, without guarantee that it contains the most recent version of the information

**可用性**，即服务一直可用，每一个请求，都能得到相应。请求只需要一定时间内返回即可，结果可以是成功或者失败，也不需要确保返回的是最新版本的信息。好的可用性主要是指系统能够很好地为用户服务，不出现用户操作失败或者访问超时等用户体验不好的情况。

> **Partition tolerance**: The system continues to operate despite an arbitrary number of messages being dropped by the network between nodes

**分区容错性**，即分布式系统在遇到任何网络分区故障的时候，仍然能够对外提供*满足一致性和可用性*的服务。即系统中任意信息的丢失或失败不会影响系统的继续运行。

分区容错性和扩展性紧密相关。在分布式应用中，可能因为一些分布式的原因导致系统无法正常运转。好的分区容错性要求能够使应用虽然是一个分布式系统，而看上去却好像是在一个可以运转正常的整体。比如现在的分布式系统中有某一个或者几个机器宕掉了，其他剩下的机器还能够正常运转满足系统需求，这样就具有好的分区容错性。


❓❓什么是网络分区

- 在分布式系统中，不同的节点分布在不同的子网络中，由于一些特殊的原因，这些子节点之间出现了网络不通的状态，但他们的内部子网络是正常的。从而导致了整个系统的环境被切分成了若干个孤立的区域，这就是分区。
- 以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择。

### 2. CAP 理论背景
CAP 定理属于理论计算机科学中的内容：

- 1998年 CAP 理论首次被提出，1999年被发表为论文；
- 2000年，加州伯克利的计算机科学家 Eric Brewer 在分布式计算原则研讨会（Symposium on Principles of Distributed Computing，PODC）上提出该假设；
- 2002年，MIT 的 Seth Gilbert 和 Nancy Lynch 发表布鲁尔猜想的证明，使其成为定理[^1]。

根据定理，分布式系统只能满足三项中的两项而不可能满足全部三项。理解CAP理论的最简单方式是想象两个节点分处分区两侧。允许至少一个节点更新状态会导致数据不一致，即丧失了C性质。如果为了保证数据一致性，将分区一侧的节点设置为不可用，那么又丧失了A性质。除非两个节点可以互相通信，才能既保证C又保证A，这又会导致丧失P性质。

### 3. 设计分布式系统

#### 3.1 CAP 理论的指导意义

随着互联网应用的飞速发展，数据量与日俱增，传统的 ACID 数据库已经不能满足如此大的海量数据存储了。这个时候需要设计出好的分布式数据存储方式。而这些分布式数据存储方式受到 CAP 理论的约束，不可能达到高一致性、高可用性，高分区容错性的完美设计。所以我们在设计的时候要懂得取舍，重点关注对应用需求来说比较重要的，而放弃不重要的，在 CAP 这三者之间进行取舍，设计出贴合应用的存储方案。

#### 3.2 CAP 之间的取舍

在设计分布式系统的结构之前，我们先定义一种故障模型：
- 系统包含多个节点，每个节点可以接收读和写的请求，返回成功或失败，对读还要返回一个数据。
- 和调用者之间的 lianlian

**弱化一致性**
对结果一致性不敏感的应用，可以允许在新版本上线后过一段时间才最终更新成功，期间不保证一致性。

例如网站静态页面内容、实时性较弱的查询类数据库等，简单分布式同步协议如 Gossip，以及 CouchDB、Cassandra 数据库等，都为此设计。

**弱化可用性**
对结果一致性很敏感的应用，例如银行取款机，当系统故障时候会拒绝服务。MongoDB、Redis、MapReduce 等为此设计。

Paxos、Raft 等共识算法，主要处理这种情况。在 Paxos 类算法中，可能存在着无法提供可用结果的情形，同时允许少数节点离线。

**弱化分区容忍性**
现实中，网络分区出现概率较小，但很难完全避免。

两阶段的提交算法，某些关系型数据库以及 ZooKeeper 主要考虑了这种设计。

实践中，网络可以通过双通道等机制增强可靠性，实现高稳定的网络通信。

### 4. 实际生产环境

现如今，对于多数大型互联网应用的场景，主机众多、部署分散，而且现在的集群规模越来越大，节点只会越来越多，所以节点故障、网络故障是常态，因此分区容错性也就成为了一个分布式系统必然要面对的问题。那么就只能在 C 和 A 之间进行取舍。但对于传统的项目就有可能有所不同，比如银行的转账系统，涉及到金钱的对于数据一致性不能做出一丝的让步，C 必须保证，出现网络故障后，宁可停止服务，可以再 A 和 P 之间做取舍。

总而言之，没有最好的策略，好的系统应该是根据业务场景来进行架构设计的，只有适合的才是最好的。



### 4. CAP 原理实例推导
后面学习[网络编程（七）：CAP原理推导和应用](https://zhuanlan.zhihu.com/p/20399316)来补充相关的知识

!!! https://blog.csdn.net/dellme99/article/details/15340955 根据这篇文章补充一下



[^1]:Nancy Lynch and Seth Gilbert, “Brewer's conjecture and the feasibility of consistent, available, partition-tolerant web services” 互联网档案馆的存档，存档日期2008-09-08., ACM SIGACT News, Volume 33 Issue 2 (2002), pg. 51-59.