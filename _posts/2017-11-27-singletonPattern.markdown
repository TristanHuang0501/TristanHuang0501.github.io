---
layout:     post
title:      "我，独一无二"
subtitle:   理解 Singleton Pattern
date:       2017-11-27
author:     "Tristan"
header-img: "img/post-bg-git.png"
catalog:    true
tags:
- 设计模式
---

> 单件模式某种意义上来讲，可能是所有模式中最“单纯”的，因为她的类图只有一个类！尽管从类设计的角度来说很简单，但在实现上还是会遇到相当多的波折。 


&#160; &#160; &#160; &#160;在开发时，有一些对象其实我们只需要一个，比方说：线程池（threadpool）、缓存（cache)、对话框、处理偏好设置和注册表（registry）的对象、日志对象、充当打印机、显卡等设备的驱动程序的对象。事实上，这类对象只能有一个实例，如果制造出多个，就会导致许多的问题，例如：程序的行为异常、资源使用过量，或者是不一致的结果。

&#160; &#160; &#160; &#160;使用单例模式可以很好地解决这个问题，除了保持对象的唯一性外，还能提供全局访问点，并且根据实现的方式的不同而具有如延迟实例化、改善多线程

&#160; &#160; &#160; &#160;先来看下单件模式的简单定义：
> 单件模式确保一个类只有一个实例，并提供一个全局访问点。



## 写法

## 实际运用

## 疑问

- 类的单件和对象的单件有什么区别？
- 全局变量比起单件模式来有哪些不足的地方？
- 既然单件模式的构造器是私有的，那么是否还能够设计出她的子类，继承单件类？
- 多个类加载器如何导致单件失效而产生多个实例？

## 参考资料：

- [漫画：什么是单例设计模式](http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653192169&idx=1&sn=9c7c8c269b44443b5c4c6136529367c4&chksm=8c990d33bbee8425731a0ae76bd656a78e4fc9dddbe6c62ee77fc5686b35d001f9ced0980a3a&mpshare=1&scene=1&srcid=1127ZSP9IcnzmWHyT9d4jYxh#rd)


## 可以参考的写作素材

- 《我，机器人》独一无二
- One一个 app